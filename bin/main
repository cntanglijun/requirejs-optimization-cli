#!/usr/bin/env node
'use strict';

require('colors');

require('babel-polyfill');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _requirejs = require('requirejs');

var _requirejs2 = _interopRequireDefault(_requirejs);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _globWatcher = require('glob-watcher');

var _globWatcher2 = _interopRequireDefault(_globWatcher);

var _package = require('../package.json');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = console.log;

var rcFilePath = void 0;

_commander2.default.version(_package.version).usage('<path> [options]').arguments('<path>').option('-f, --out-file <path>', '指定输出文件路径').option('-d, --out-dir <path>', '指定输出目录路径').option('-c, --config <path>', '指定优化配置文件路径').option('    --nocompress', '不压缩代码').option('-w, --watch', '监视文件变动').action(function (file) {
  rcFilePath = file;

  _isFile(file) ? _doFile(file) : _doDir(file);
}).parse(process.argv);

function _doFile(file) {
  var ext = _path2.default.extname(file);
  var basename = _path2.default.basename(file);
  var output = _commander2.default.outFile || file.replace(ext, '.r.js');

  if (!_path2.default.extname(output)) {
    output = _path2.default.join(output, basename.replace(ext, '.r.js'));
  }

  if (_commander2.default.watch) {
    (0, _globWatcher2.default)(file).on('change', function (p) {
      _optimizeAmd(file, output);
    });

    log(['Watching ' + file + '! Use `Ctrl + C` to stop!', '正在监视 ' + file + '! `Ctrl + C` 停止'].join('\n').yellow);
  }

  _optimizeAmd(file, output);
}

function _doDir(file) {
  var pattern = _path2.default.join(file, '**/*.js');
  var outDir = _commander2.default.outDir;
  var formatOutputUrl = function formatOutputUrl(file) {
    var output = void 0;

    if (outDir && outDir !== rcFilePath) {
      output = file.replace(rcFilePath, outDir);
    } else {
      output = file.replace('js', 'r.js');
    }

    return output;
  };

  (0, _glob2.default)(pattern, null, function (e, files) {
    if (e) {
      log(e.message.red);
    } else {
      files.forEach(function (file) {
        _optimizeAmd(file, formatOutputUrl(file));
      });
    }
  });

  if (_commander2.default.watch) {
    var handle = function handle(file) {
      _optimizeAmd(file, formatOutputUrl(file));
    };

    (0, _globWatcher2.default)(pattern).on('add', handle).on('change', handle);
  }
}

function _isFile(file) {
  try {
    return _fs2.default.statSync(file).isFile();
  } catch (e) {
    log(e.message.red);
  }
}

function _isJsFile(file) {
  return _path2.default.extname(filePath) === '.js' && !filePath.includes('.r.js');
}

function _optimizeAmd(file, output) {
  // 确保需要优化的文件是未优化的amd形式的js文件
  if (_isFile(file)) {

    // 优化配置
    var option = {
      baseUrl: _path2.default.dirname(file),
      name: _path2.default.basename(file, '.js'),
      out: output,
      optimize: _commander2.default.nocompress ? 'none' : 'uglify',
      findNestedDependencies: true,
      onBuildWrite: function onBuildWrite(moduleName, path, contents) {
        // 删除调试用的模块随机数配置
        var pattern = 'urlArgs: "bust=" + (new Date()).getTime(),';
        return contents.replace(pattern, '');
      }
    };

    // 指定配置文件
    if (_commander2.default.config) {
      option.mainConfigFile = _commander2.default.config;
    }

    // 调用优化
    _requirejs2.default.optimize(option, function (buildResponse) {
      log(['optimized:'.cyan, file, '=>', output.magenta, new Date().toLocaleString()].join(' '));
    }, function (err) {
      log(err.message.red);
    });
  }
}

if (!rcFilePath) {
  log(['Nothing to do! Use `rc -h` to get help!', '什么都没有发生! 使用 `rc -h` 查看帮助'].join('\n').yellow);
}